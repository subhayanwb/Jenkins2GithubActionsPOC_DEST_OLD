name: Java CI/CD Pipeline
'on':
  push:
    branches:
    - main
    - develop
    - feature/*
    - release/*
    - hotfix/*
env:
  ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  CHECKMARX_URL: ${{ secrets.CHECKMARX_URL }}
  CHECKMARX_USERNAME: ${{ secrets.CHECKMARX_USERNAME }}
  CHECKMARX_PASSWORD: ${{ secrets.CHECKMARX_PASSWORD }}
  CHECKMARX_CLIENT_SECRET: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
  APP_NAME: your-app-name
  JAVA_VERSION: '11'
  MAVEN_VERSION: 3.8.4
  QUAY_REGISTRY: ${{ secrets.QUAY_REGISTRY }}
  QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
  QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: adopt
    - name: Build with Maven
      run: mvn clean install -B -Dsonar.buildbreaker.skip=true -Dmaven.test.skip=true
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-artifact
        path: target/*.jar
    if: contains(fromJson('[".*"]'), github.ref_name)
  quality-scan-sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    needs:
    - maven-build
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
  quality-scan-checkmarx:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Checkmarx Scan
      uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.4
      with:
        project: ${{ env.APP_NAME }}
        team: /CxServer/SP/Company
        checkmarx_url: ${{ secrets.CHECKMARX_URL }}
        checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}
        checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}
        checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
    needs:
    - quality-scan-sonarqube
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
  docker-buildimage-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: ${{ env.QUAY_REGISTRY }}
        username: ${{ env.QUAY_USERNAME }}
        password: ${{ env.QUAY_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.QUAY_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
    needs:
    - quality-scan-checkmarx
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
  openshift-deploy-dev:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Checkout Helm Templates
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.HELM_TEMPLATES_REPO }}
        path: helm-templates
        token: ${{ secrets.HELM_REPO_PAT }}
    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.4.0
    - name: Generate Helm Charts
      run: |
        helm template dev-${{ env.APP_NAME }} ./helm-templates --set image.repository=${{ env.QUAY_REGISTRY }}/${{ github.repository }} --set image.tag=${{ github.sha }} > rollout.yaml
    - name: Checkout Config Repo
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.CONFIG_REPO }}
        path: config-repo
        token: ${{ secrets.CONFIG_REPO_PAT }}
    - name: Update Helm Charts in Config Repo
      run: |
        mkdir -p config-repo/{env_name}
        cp rollout.yaml config-repo/{env_name}/
        cd config-repo
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "Update Helm charts for ${{ env.APP_NAME }}-{env_name} - ${{ github.sha }}"
        git push
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Deploy with Argo Rollouts
      run: |
        kubectl argo rollouts set image ${{ env.APP_NAME }}-{env_name} ${{ env.APP_NAME }}-{env_name}=${{ env.QUAY_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
        kubectl argo rollouts status ${{ env.APP_NAME }}-{env_name} --watch
    needs:
    - docker-buildimage-image
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
    environment: dev
  openshift-promote-dev:
    runs-on: ubuntu-latest
    steps:
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Promote Argo Rollouts
      run: kubectl argo rollouts promote ${ env.APP_NAME }-dev
    needs:
    - openshift-deploy-dev
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
    environment: dev
  openshift-deploy-qa:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Checkout Helm Templates
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.HELM_TEMPLATES_REPO }}
        path: helm-templates
        token: ${{ secrets.HELM_REPO_PAT }}
    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.4.0
    - name: Generate Helm Charts
      run: |
        helm template dev-${{ env.APP_NAME }} ./helm-templates --set image.repository=${{ env.QUAY_REGISTRY }}/${{ github.repository }} --set image.tag=${{ github.sha }} > rollout.yaml
    - name: Checkout Config Repo
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.CONFIG_REPO }}
        path: config-repo
        token: ${{ secrets.CONFIG_REPO_PAT }}
    - name: Update Helm Charts in Config Repo
      run: |
        mkdir -p config-repo/{env_name}
        cp rollout.yaml config-repo/{env_name}/
        cd config-repo
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "Update Helm charts for ${{ env.APP_NAME }}-{env_name} - ${{ github.sha }}"
        git push
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Deploy with Argo Rollouts
      run: |
        kubectl argo rollouts set image ${{ env.APP_NAME }}-{env_name} ${{ env.APP_NAME }}-{env_name}=${{ env.QUAY_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
        kubectl argo rollouts status ${{ env.APP_NAME }}-{env_name} --watch
    needs:
    - openshift-promote-dev
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
    environment: qa
  openshift-promote-qa:
    runs-on: ubuntu-latest
    steps:
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Promote Argo Rollouts
      run: kubectl argo rollouts promote ${ env.APP_NAME }-qa
    needs:
    - openshift-deploy-qa
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
    environment: qa
  openshift-deploy-uat:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Checkout Helm Templates
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.HELM_TEMPLATES_REPO }}
        path: helm-templates
        token: ${{ secrets.HELM_REPO_PAT }}
    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.4.0
    - name: Generate Helm Charts
      run: |
        helm template dev-${{ env.APP_NAME }} ./helm-templates --set image.repository=${{ env.QUAY_REGISTRY }}/${{ github.repository }} --set image.tag=${{ github.sha }} > rollout.yaml
    - name: Checkout Config Repo
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.CONFIG_REPO }}
        path: config-repo
        token: ${{ secrets.CONFIG_REPO_PAT }}
    - name: Update Helm Charts in Config Repo
      run: |
        mkdir -p config-repo/{env_name}
        cp rollout.yaml config-repo/{env_name}/
        cd config-repo
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "Update Helm charts for ${{ env.APP_NAME }}-{env_name} - ${{ github.sha }}"
        git push
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Deploy with Argo Rollouts
      run: |
        kubectl argo rollouts set image ${{ env.APP_NAME }}-{env_name} ${{ env.APP_NAME }}-{env_name}=${{ env.QUAY_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
        kubectl argo rollouts status ${{ env.APP_NAME }}-{env_name} --watch
    needs:
    - openshift-promote-qa
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
    environment: uat
  openshift-promote-uat:
    runs-on: ubuntu-latest
    steps:
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Promote Argo Rollouts
      run: kubectl argo rollouts promote ${ env.APP_NAME }-uat
    needs:
    - openshift-deploy-uat
    if: contains(fromJson('["^(develop|feature|release).*"]'), github.ref_name)
    environment: uat
  docker-publishimage-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: ${{ env.QUAY_REGISTRY }}
        username: ${{ env.QUAY_USERNAME }}
        password: ${{ env.QUAY_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.QUAY_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
    needs:
    - openshift-promote-uat
    if: contains(fromJson('["^(release|hotfix).*"]'), github.ref_name)
  openshift-deploy-prod:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Checkout Helm Templates
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.HELM_TEMPLATES_REPO }}
        path: helm-templates
        token: ${{ secrets.HELM_REPO_PAT }}
    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.4.0
    - name: Generate Helm Charts
      run: |
        helm template dev-${{ env.APP_NAME }} ./helm-templates --set image.repository=${{ env.QUAY_REGISTRY }}/${{ github.repository }} --set image.tag=${{ github.sha }} > rollout.yaml
    - name: Checkout Config Repo
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.CONFIG_REPO }}
        path: config-repo
        token: ${{ secrets.CONFIG_REPO_PAT }}
    - name: Update Helm Charts in Config Repo
      run: |
        mkdir -p config-repo/{env_name}
        cp rollout.yaml config-repo/{env_name}/
        cd config-repo
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "Update Helm charts for ${{ env.APP_NAME }}-{env_name} - ${{ github.sha }}"
        git push
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Deploy with Argo Rollouts
      run: |
        kubectl argo rollouts set image ${{ env.APP_NAME }}-{env_name} ${{ env.APP_NAME }}-{env_name}=${{ env.QUAY_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
        kubectl argo rollouts status ${{ env.APP_NAME }}-{env_name} --watch
    needs:
    - docker-publishimage-image
    if: contains(fromJson('["^(release|hotfix).*"]'), github.ref_name)
    environment: prod
  openshift-promote-prod:
    runs-on: ubuntu-latest
    steps:
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
    - name: Promote Argo Rollouts
      run: kubectl argo rollouts promote ${ env.APP_NAME }-prod
    needs:
    - openshift-deploy-prod
    if: contains(fromJson('["^(release|hotfix).*"]'), github.ref_name)
    environment: prod

